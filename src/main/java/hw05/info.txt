Міні проєкт "Щаслива родина" (продовження)

Суть проєкту: опис структури сім'ї з урахуванням того, що кожна людина має кровних родичів,
а склад сім'ї може з часом змінюватися.

Життєвий цикл об'єкта. Складальник сміття
Завдання
Пере визначте метод finalize().

Вдоскональте проєкт:

реалізуйте види тварин і розклад позаробочих занять людей через перерахування enum
(використовуйте види на власний розсуд, наприклад, CAT, DOG і т.д.)
напишіть модульні тести до всіх кастомних методів проєкту, які можна покрити тестами.
Технічні вимоги:
Пере визначте метод finalize() у класів Family, Human, Pet так, щоб вони перед видаленням збирачем сміття
виводили в консоль інформацію про об'єкт, що видаляється.
Створіть у класі Main у циклі стільки об'єктів типу Human, щоб збирач сміття почав видаляти старі об'єкти
(від 10 тисяч до 10 мільйонів, залежно від обсягу доступної оперативної пам'яті).
Створіть enum Species зі списком видів тварин; додайте перерахування на власний розсуд; зробіть рефакторинг класу Pet -
вид тварини зміниться з типу String на тип Species
Створіть enum DayOfWeek зі списком днів тижня; додайте туди усі 7 днів; коли заповнюватимете розклад Human
(у методі main) використовуйте метод перерахування name(), який повертає рядкове подання поточного перерахування.
Напишіть тести для наступних методів з огляду на те, що у вас може бути як позитивний сценарій виконання методу,
так і негативний:
toString - перевірте, що методи повертають певний рядок для певних об'єктів;
deleteChild(Human child) - зробіть 2 перевірки:
перевірте, що дитина дійсно видаляється з масиву children (якщо передати об'єкт,
еквівалентний хоча б одному елементу масиву);
перевірте, що масив children залишається без змін (якщо передати об'єкт, не еквівалентний жодному елементу масиву);
deleteChild(int index) - зробіть 2 перевірки:
Перевірте, що дитина дійсно видаляється з масиву children і метод повертає правильне значення;
перевірте, що масив children залишається без змін (якщо передати індекс, що виходить за діапазон індексів),
та метод повертає правильне значення;
addChild - перевірте, що масив children збільшується на один елемент і що цим елементом є саме переданий об'єкт із
необхідними посиланнями;
countFamily - перевірте, що метод повертає правильну кількість людей у сім'ї.
Подальшу зміну проєкту покривайте тестами.
Необов'язкове завдання просунутої складності:
enum Species повинен містити конструктор, в якому можна буде вказати кілька параметрів тварини:
чи вміє тварина літати (canFly, boolean)
скільки у тварини лап (numberOfLegs, число)
чи є у тварини шерсть (hasFur, boolean)
Додати інформацію про те, чи вміє тварина літати, чи є в нього вовна, і кількість лап у метод toString() класу Pet.
Напишіть тести для equals() та hashcode(): напишіть перевірки, при яких equals() повертає true/false, опрацюйте всі
випадки згідно з контрактом equals;