Завдання
Удоскональте проєкт:

Створіть шар DAO

створіть класи FamilyController та FamilyService для роботи з об'єктами типу Family.

Технічні вимоги:

Створіть інтерфейс для доступу до даних класу Family - FamilyDao з наступними методами:

 - getAllFamilies – повертає проіндексований список всіх сімей (List).
 - getFamilyByIndex (приймає індекс сім'ї із загального списку) - повертає сім'ю за вказаним індексом. Якщо запитали елемент з індексом, що не існує - повертайте null.
 - deleteFamily (приймає індекс) – видаляє сім'ю із заданим індексом, якщо такий індекс існує; повертає true якщо видалення відбулося, false - якщо ні.
 - deleteFamily (приймає тип Family) - видаляє сім'ю якщо така існує у списку; повертає true якщо видалення відбулося, false - якщо ні.
 - saveFamily (приймає тип Family) - оновлює наявну сім'ю в БД, якщо така вже існує, зберігає в кінець списку - якщо ні.

Створіть клас CollectionFamilyDao: клас повинен містити List<Family>,
в якому зберігатимуться всі сім'ї (це буде наша база даних) та реалізуйте в ньому інтерфейс FamilyDao.

Створіть клас FamilyService, який повинен містити поле FamilyDao для доступу до даних, що зберігаються.

Клас FamilyService повинен реалізовувати методи (якщо в FamilyDao для реалізації не вистачає якихось методів –
додайте їх та реалізуйте в CollectionFamilyDao):

 - getAllFamilies - одержати список всіх сімей.
 - displayAllFamilies - вивести на екран усі сім'ї (в індексованому списку) з усіма членами сім'ї.
 - getFamiliesBiggerThan - знайти сім'ї з кількістю людей більше ніж (приймає кількість осіб та повертає всі сім'ї де кількість людей більша за вказану); виводить інформацію на екран.
 - getFamiliesLessThan - знайти сім'ї з кількістю людей менше ніж (приймає кількість осіб та повертає всі сім'ї де кількість людей менша ніж зазначена); виводить інформацію на екран.
 - countFamiliesWithMemberNumber - підрахувати число сімей з кількістю людей, що дорівнює переданому числу.
 - createNewFamily - створити нову сім'ю (приймає 2 параметри типу Human) - створює нову сім'ю, зберігає у БД.
 - deleteFamilyByIndex - видалити сім'ю за індексом у списку - видаляє сім'ю із БД.
 - bornChild - народити сім'єю дитину (приймає Family та 2 типу String: чоловіче та жіноче ім'я) - у цій сім'ї з'являється нова дитина з урахуванням даних батьків, інформація про сім'ю оновлюється у БД; метод повертає оновлену сім'ю. Якщо народжена дитина хлопчик – йому присвоюється чоловіче ім'я, якщо дівчинка – жіноче.
 - adoptChild - усиновити дитину (приймає 2 параметри: Family, Human)- у цій сім'ї зберігається ця дитина, інформація про сім'ю оновлюється в БД; метод повертає оновлену сім'ю.
 - deleteAllChildrenOlderThen - видалити дітей старше ніж (приймає int) - у всіх сім'ях видаляються діти, які старші від зазначеного віку, інформація оновлюється в БД.
 - count - повертає кількість сімей у БД.
 - getFamilyById - приймає індекс сім'ї, повертає Family за вказаним індексом.
 - getPets - приймає індекс сім'ї, повертає список свійських тварин, які живуть у сім'ї.
 - addPet - приймає індекс сім'ї та параметр Pet - додає нового вихованця в сім'ю, оновлює дані в БД.

Створіть клас FamilyController, який має містити поле FamilyService для доступу до методів бізнес-логіки програми.
Клас FamilyController повинен мати все ті ж методи, які є в FamilyService.
У класі Main викличте всі методи з FamilyController, щоб продемонструвати їхню працездатність.
Покрийте всі методи з FamilyService модульними тестами.